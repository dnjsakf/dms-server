pipeline {
    agent any

    environment {
        ARGOCD_APP_NAME = 'dms-app'
        APP_NAME = 'dms-server'
        
        BUILD_TARGET = 'dev'
        BUILD_VERSION = "1.0.${env.BUILD_ID}-${env.BUILD_TARGET}"

        DEPLOY_CREDENTIALS_ID = 'github-user'
        DEPLOY_REPO_URL = 'github.com/dnjsakf/argocd-apps.git'
        DEPLOY_PATH = "${env.ARGOCD_APP_NAME}/${env.APP_NAME}/${env.APP_NAME}-deployment.yaml"

        DOCKER_CREDENTIALS_ID = 'docker-user'
        DOCKER_IMAGE_NAME = "dnjsakf/${env.APP_NAME}"
        DOCKER_IMAGE_TAG = "${env.DOCKER_IMAGE_NAME}:${env.BUILD_VERSION}"
        DOCKER_IMAGE_TAG_LATEST = "${env.DOCKER_IMAGE_NAME}:latest"

        ARGOCD_SERVER = 'https://host.docker.internal:38080'
        ARGOCD_AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhcGl1c2VyOmFwaUtleSIsIm5iZiI6MTczMTMxMjQyMSwiaWF0IjoxNzMxMzEyNDIxLCJqdGkiOiIxMGExZTIwNy1jMThlLTRlNjQtOWY3OC03ODU5MjBjOTQyOTgifQ.3w8dhtj6S8nGoYV9d2uhitPvkzn41VLeYvzeWqbdNcY'
    }

    stages {
        stage('Build') {
            steps {
                echo "Express is no build"
            }
        }

        stage('Stop Container & Remove Image') {
            steps {
                script {
                    sh """
                    if [ \$(docker ps -a -q -f name=\"${env.APP_NAME}\") ]; then
                        docker stop ${env.APP_NAME}
                        docker rm ${env.APP_NAME}
                    fi
                    """
                    sh """
                    IMAGE_ID=\$(docker images -q -f reference=${env.DOCKER_IMAGE_TAG_LATEST})
                    if [ -n "\$IMAGE_ID" ]; then
                        echo "Docker Image Clean...  ${env.DOCKER_IMAGE_TAG_LATEST}"
                        docker rmi ${env.DOCKER_IMAGE_TAG_LATEST}
                    fi
                    """
                }
            }
        }

        stage('Docker Image Build & Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${env.DOCKER_CREDENTIALS_ID}") {
                        def buildImage = docker.build("${env.DOCKER_IMAGE_TAG}", "-f ./cicd/${env.BUILD_TARGET}/Dockerfile .")
                        buildImage.push()

                        sh "docker tag ${env.DOCKER_IMAGE_TAG} ${env.DOCKER_IMAGE_TAG_LATEST}"
                        sh "docker push ${env.DOCKER_IMAGE_TAG_LATEST}"
                    }
                }
            }
        }

        stage('Checkout Deploy Repo') {
            steps {
                git credentialsId: "${env.DEPLOY_CREDENTIALS_ID}",
                    branch: 'main',
                    url: "https://${env.DEPLOY_REPO_URL}"
            }
        }

        stage('Update Deployment YAML') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${env.DEPLOY_CREDENTIALS_ID}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """
                    sed -i 's|image:.*|image: ${env.DOCKER_IMAGE_TAG}|' ${env.DEPLOY_PATH}
                    git config user.email "${GIT_USERNAME}@example.com"
                    git config user.name "${GIT_USERNAME}"
                    git add ${env.DEPLOY_PATH}
                    git commit -m "Update image to ${env.DOCKER_IMAGE_TAG}"
                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${env.DEPLOY_REPO_URL}
                    """
                }
            }
        }

        // stage('Running container') {
        //     steps {
        //         script {
        //             def container = docker.image("${env.DOCKER_IMAGE_TAG_LATEST}")
        //             container.run("-d -p 3000:80 --network bridge --name ${env.APP_NAME}")
        //             container.run("-d --add-host host.docker.internal:host-gateway --network bridge --name ${env.APP_NAME}")
        //         }
        //     }
        // }

        stage('Trigger ArgoCD Sync') {
            steps {
                script {
                    sh """
                    curl -k -X POST ${env.ARGOCD_SERVER}/api/v1/applications/${env.ARGOCD_APP_NAME}/sync \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${env.ARGOCD_AUTH_TOKEN}"
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()

            script {
                sh """
                IMAGE_ID=\$(docker images -q -f reference=${env.DOCKER_IMAGE_TAG})
                if [ -n "\$IMAGE_ID" ]; then
                    echo "Docker Image Clean...  ${env.DOCKER_IMAGE_TAG}"
                    docker rmi ${env.DOCKER_IMAGE_TAG}
                fi
                """
            }
        }
        success {
            sh 'echo "This will run only if all stages succeed"'
        }
        failure {
            sh 'echo "This will run only if any stage fails"'
        }
    }
}
